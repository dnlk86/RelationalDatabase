BASH COMMANDS:

cd <path>		->	change directory
.	->	shortcut for current directory
.. 	->	shortcut for previous directory
rm <filename>	->	remove
mv <filename>	->	move
cp <filename or directory> -> copy
rm -r		-> remove recursively, caution it deletes all files and sub folders
ls	-> list
ls -a	-> it lists also hidden files
ls -l   -> lists the files in a folder in the long list format showing permissions
find	->	display tree
more <filename>		-> displais file content
mkdir	-> make directory
rmdir	-> remove directory
touch <filename.extension>	-> create file
echo <text>		-> prints out a text
echo <text> >> <filename> 	->	writes a text into a file

++++++++++

touch filename.sh   ->  to create a script file
sh filename.sh  ->  to run a script with the shell interpreter
bash filename.sh    ->  to run a script with the bash interpreter, bash stands for bourne-again shell
which bash  ->  to find where the bash interpreter is located
#!<path_to_interpreter>     -> it is called a shebang and must be placed on top of the script file in
                                order to use a specific interpreter without calling it directly: 
                                    #!/bin/bash
                                    echo hello world!
                            ->  now the file is executed by simply typing ./filename.sh in the terminal
r, w, x -> in permissions indicate respectively read, write and executed
chmod +x filename.sh    -> to add executable permission to a file for all users
VARIAbLE_NAME=VALUE      -> to create a variable (note no space between name and value)
$VARIABLE_NAME          -> to use a variable somewhere in the script
read VARIABLE_NAME      -> to accept input from user and store it in a variable
echo -e "\n~~ SomeText ~~\n"    -> to print a text with a preceding and a following empty line
man <commandName>       -> to display the manual for a certain command
# comment               -> that's how comments are done
echo $*                 -> to print all the arguments passed to a program while executing it
./programName arg1 arg2 arg3    -> to pass arguments to a bash script
$1                      -> to access the first argument passed (arg1)
help                    -> to list all the built-in command
[[ expression ]]        -> expressions go inside double square braces
help test               -> to see the possible operators
echo $?                 -> to print the exit status of a command (all commands have one). 0 for no 
                            errors, 1 or more when errors occur
: '
    multi
    line
    comment
'
printenv                -> to print out all enviroment variables in shell
declare -p              -> p stands for print, it prints out all variables in the shell, it includes 
                            env variables and all other created in the shell
$RANDOM                 -> this variable generates a random number between 0 and 32767. with the mod 
                            operator can be added can be added a range: $RANDOM%100
help let                -> to see all available operators available in arithmetic expressions
$(( ...some expression ))  -> to perform some operation without altering the value of the variables 
                                used in it. This is how a variable can be assigned to some calculation

                                *** as a reminder, (( ... )) will perform a calculation or operation and 
                                output nothing. $(( ... )) will replace the calculation with the result of it
declare                 -> can be used to create variables
declare -p Somevariable -> to view the variable and its value
ARR=("a" "b" "c")       -> to declare an array
echo ${ARR[1]}          -> to print the first item of the array
echo ${ARR[@]}          -> to print all items of an array
type <command name>     -> to display the type of a command
cat                     -> to print the content of a file in the terminal
declare -p IFS          -> a variable to determine words boudaries, the default is space, tabs and newlines
pg_dump --clean --create --inserts --username=freecodecamp students > students.sql      -> to create a dump
                         of the students database and store it in the students.sql file
psql -U postgres < students.sql     -> to rebuild a database from a previously made db dump
command_1 | command_2   -> pipe operator is used to assign the output of a command as the input of another one
echo hello world > stdout.txt           -> to print the string "hello world" in the stdout.txt file instead
                                        of the terminal. If the file does not exist, it is created, otherwise 
                                        it is overwritten.
echo more text... >> stdout.txt         -> to add more content to the stdout.txt file, instead of overwriting it
echo bad_command > stderr.txt           -> to print the error message in the stderr.txt file
echo hello world 1> stdout.txt          -> to redirect the output, same as > stdout.txt
echo bad_command 2> stderr.txt          -> to redirect an error
>                                       -> redirects the output
<                                       -> redirects the input, example:
                                            ./script.sh < name.txt
cat                     -> it will print the content of a file line by line
echo Hulix | ./script.sh 2> stderr.txt 1> stdout.txt        -> 'Hulix' is passed with the pipe operator as the 
                                        read input of the script.sh, the error ist passed to stderr.txt with the
                                        2> operator, and lastly the output of the script ist passed to the stdout.txt
                                        file through the 1> operator
./script.sh < name.txt 2> stderr.txt 1> stdout.txt -> redirects the content of name.txt as the input of script.sh
                                        redirects the error to stderr.txt and the output to stdout.txt
wc <filename>                           -> stands for word count, it prints out some info about a file, lines num, 
                                        word num, bytes num
grep '<pattern>' <filename>             -> is a command for searching patterns in texts
grep '<pattern>' <filename> --color     -> to highlight the searched pattern. There are even more flag (look "man grep")
sed 's/<pattern_to_replace>/<pattern_to_replace_it_with>/' <filename>